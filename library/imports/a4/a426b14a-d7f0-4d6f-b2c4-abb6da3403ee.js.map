{"version":3,"sources":["../../../../../assets/Script/AtomFrame/assets/Script/AtomFrame/timerMgr.js"],"names":["cc","Class","extends","Component","properties","TAG","TASK_TYPE_RE","TASK_TYPE_ONE","ctor","console","log","tasklist","scheduler","director","getScheduler","schedule","mUpdate","macro","REPEAT_FOREVER","onLoad","onDestroy","unschedule","t","key","hasOwnProperty","item","remove","cd_t","time","callback","taskType","registerTask","_taskName","_taskType","_callback","_time","taskName","cleanTask","cleanAllTask","checkTask"],"mappings":";;;;;;AACA;;;AAGAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,aAAK,UADG;AAERC,sBAAgB,CAFR;AAGRC,uBAAgB;AAHR,KAHP;;AASLC,UAAM,gBAAY;AACdC,gBAAQC,GAAR,CAAY,UAAU,KAAKL,GAA3B;AACA,aAAKM,QAAL,GAAgB,EAAhB;AACA;;AAEA,YAAIC,YAAYZ,GAAGa,QAAH,CAAYC,YAAZ,EAAhB;AACAF,kBAAUG,QAAV,CAAmB,KAAKC,OAAxB,EAAiC,IAAjC,EAAuC,CAAvC,EAA0ChB,GAAGiB,KAAH,CAASC,cAAnD,EAAmE,CAAnE,EAAsE,KAAtE;AACH,KAhBI;;AAkBLC,YAAQ,kBAAY;AAChBV,gBAAQC,GAAR,CAAY,WAAW,KAAKL,GAA5B;AACH,KApBI;;AAsBLe,eAAW,qBAAY;AACnBX,gBAAQC,GAAR,CAAY,cAAc,KAAKL,GAA/B;AACA;;AAEAL,WAAGa,QAAH,CAAYC,YAAZ,GAA2BO,UAA3B,CAAsC,KAAKL,OAA3C,EAAoD,IAApD;AACH,KA3BI;;AA6BLA,aAAS,iBAAUM,CAAV,EAAa;AAClB;AACA,aAAK,IAAIC,GAAT,IAAgB,KAAKZ,QAArB,EAA+B;AAC3B,gBAAI,KAAKA,QAAL,CAAca,cAAd,CAA6BD,GAA7B,CAAJ,EAAuC;AACnC,oBAAIE,OAAO,KAAKd,QAAL,CAAcY,GAAd,CAAX;AACA,oBAAIE,QAAQ,IAAZ,EAAkB;AACd,wBAAIA,KAAKC,MAAL,IAAe,KAAnB,EAA0B;AACtBD,6BAAKE,IAAL,IAAaL,CAAb;AACA,4BAAIG,KAAKE,IAAL,GAAYF,KAAKG,IAArB,EAA2B;AACvBH,iCAAKE,IAAL,GAAY,CAAZ;AACAF,iCAAKI,QAAL;AACApB,oCAAQC,GAAR,CAAY,gBAAZ,EAA8Ba,GAA9B,EAAmCE,KAAKK,QAAxC;AACA;AACA,gCAAIL,KAAKK,QAAL,IAAiB,KAAKvB,aAA1B,EAAyC;AACrCkB,qCAAKC,MAAL,GAAc,IAAd;AACAjB,wCAAQC,GAAR,CAAY,gBAAZ,EAA8Ba,GAA9B;AACH;AACJ;AACJ,qBAZD,MAYO;AACH,6BAAKZ,QAAL,CAAcY,GAAd,IAAqB,IAArB;AACH;AACJ;AACJ;AACJ;AACJ,KArDI;;AAuDLQ,kBAAc,sBAAUC,SAAV,EAAsBC,SAAtB,EAAkCC,SAAlC,EAA8CC,KAA9C,EAAsD;AAChE,YAAI,KAAKxB,QAAL,CAAcqB,SAAd,KAA4B,IAAhC,EAAqC;AACjCvB,oBAAQC,GAAR,CAAY,2BAAZ,EAAyCsB,SAAzC;AACA;AACH;;AAED,YAAIP,OAAO,EAAX;AACAA,aAAKW,QAAL,GAAgBJ,SAAhB;AACAP,aAAKK,QAAL,GAAgBG,SAAhB;AACAR,aAAKI,QAAL,GAAgBK,SAAhB;AACAT,aAAKG,IAAL,GAAgBO,KAAhB;AACAV,aAAKE,IAAL,GAAgB,CAAhB;AACAF,aAAKC,MAAL,GAAgB,KAAhB;;AAEA,aAAKf,QAAL,CAAcqB,SAAd,IAA2BP,IAA3B;AACH,KAtEI;;AAwELY,eAAW,mBAAUL,SAAV,EAAqB;AAC5B,aAAKrB,QAAL,CAAcqB,SAAd,IAA2B,IAA3B;AACH,KA1EI;;AA4ELM,kBAAc,wBAAY;AACtB,aAAK3B,QAAL,GAAgB,EAAhB;AACH,KA9EI;;AAgFL4B,eAAW,mBAAUP,SAAV,EAAqB;AAC5B,eAAO,KAAKrB,QAAL,CAAcqB,SAAd,KAA4B,IAAnC;AACH;;AAlFI,CAAT","file":"timerMgr.js","sourceRoot":"../../../../../assets/Script/AtomFrame","sourcesContent":["\n/**\n有关Component 组件的计时器 参考 https://github.com/cocos-creator/engine/blob/master/cocos2d/core/components/CCComponent.js#L541\n*/\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        TAG: \"timerMgr\",\n        TASK_TYPE_RE  : 1,\n        TASK_TYPE_ONE : 2,\n    },\n\n    ctor: function () {\n        console.log(\"-new:\" + this.TAG);\n        this.tasklist = {};\n        // this.schedule(this.mUpdate, 0);\n\n        var scheduler = cc.director.getScheduler();\n        scheduler.schedule(this.mUpdate, this, 0, cc.macro.REPEAT_FOREVER, 0, false);\n    },\n\n    onLoad: function () {\n        console.log(\"-load:\" + this.TAG);\n    },\n\n    onDestroy: function () {\n        console.log(\"-destory:\" + this.TAG);\n        // this.unschedule(this.mUpdate)\n\n        cc.director.getScheduler().unschedule(this.mUpdate, this);\n    },\n\n    mUpdate: function (t) {\n        // console.log(\"-mUpdate\",t,this.TAG);\n        for (var key in this.tasklist) {\n            if (this.tasklist.hasOwnProperty(key)) {\n                var item = this.tasklist[key]\n                if (item != null) {\n                    if (item.remove == false) {\n                        item.cd_t += t;\n                        if (item.cd_t > item.time) {\n                            item.cd_t = 0;\n                            item.callback();\n                            console.log(\"update task : \", key, item.taskType);\n                            //执行1次\n                            if (item.taskType == this.TASK_TYPE_ONE) {\n                                item.remove = true;\n                                console.log(\"remove task : \", key);\n                            }\n                        }\n                    } else {\n                        this.tasklist[key] = null;\n                    }\n                }\n            }\n        };\n    },\n\n    registerTask: function (_taskName , _taskType , _callback , _time ) {\n        if (this.tasklist[_taskName] != null){\n            console.log(\" !!! task already exist :\", _taskName);\n            return ;\n        }\n\n        var item = {}\n        item.taskName = _taskName;\n        item.taskType = _taskType;\n        item.callback = _callback;\n        item.time     = _time;\n        item.cd_t     = 0;\n        item.remove   = false;\n\n        this.tasklist[_taskName] = item;\n    },\n\n    cleanTask: function (_taskName) {\n        this.tasklist[_taskName] = null;\n    },\n\n    cleanAllTask: function () {\n        this.tasklist = {};\n    },\n\n    checkTask: function (_taskName) {\n        return this.tasklist[_taskName] != null ;\n    },\n\n});\n"]}