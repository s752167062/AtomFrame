{"version":3,"sources":["Atom.js"],"names":["Atom","createAtom","console","log","cc","sys","os","timerMgr","require","gameState","gameConfMgr","eventMgr","msgMgr","spriteMgr","audioMgr","prefabMgr","effectMgr","animateMgr","resMgr","UIMgr","comFunMgr","gameDataMgr","gameNetMgr","socketMgr","hotUpdateMgr","module","exports"],"mappings":";;;;;;AACA,IAAMA,OAAO;AACTC,cADS,wBACG;AACRC,gBAAQC,GAAR,CAAY,0BAA0BC,GAAGC,GAAH,CAAOC,EAA7C;AACAF,WAAGJ,IAAH,GAAU,EAAV;;AAEA;AACA,YAAIO,WAAWC,QAAQ,UAAR,CAAf;AACAJ,WAAGJ,IAAH,CAAQO,QAAR,GAAmB,IAAIA,QAAJ,EAAnB;;AAEA;AACA;AACA;;AAEA;AACA,YAAIE,YAAYD,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQS,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,cAAcF,QAAQ,aAAR,CAAlB;AACAJ,WAAGJ,IAAH,CAAQU,WAAR,GAAsB,IAAIA,WAAJ,EAAtB;;AAEA;AACA,YAAIC,WAAWH,QAAQ,UAAR,CAAf;AACAJ,WAAGJ,IAAH,CAAQW,QAAR,GAAmB,IAAIA,QAAJ,EAAnB;;AAEA;AACA,YAAIC,SAASJ,QAAQ,QAAR,CAAb;AACAJ,WAAGJ,IAAH,CAAQY,MAAR,GAAiB,IAAIA,MAAJ,EAAjB;;AAEA;AACA;AACA;;AAEA;AACA,YAAIC,YAAYL,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQa,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,WAAWN,QAAQ,UAAR,CAAf;AACAJ,WAAGJ,IAAH,CAAQc,QAAR,GAAmB,IAAIA,QAAJ,EAAnB;;AAEA;AACA,YAAIC,YAAYP,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQe,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,YAAYR,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQgB,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,aAAaT,QAAQ,YAAR,CAAjB;AACAJ,WAAGJ,IAAH,CAAQiB,UAAR,GAAqB,IAAIA,UAAJ,EAArB;;AAEA;AACA,YAAIC,SAASV,QAAQ,QAAR,CAAb;AACAJ,WAAGJ,IAAH,CAAQkB,MAAR,GAAiB,IAAIA,MAAJ,EAAjB;;AAEA;AACA,YAAIC,QAAQX,QAAQ,OAAR,CAAZ;AACAJ,WAAGJ,IAAH,CAAQmB,KAAR,GAAgB,IAAIA,KAAJ,EAAhB;;AAEA;AACA,YAAIC,YAAYZ,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQoB,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,cAAcb,QAAQ,aAAR,CAAlB;AACAJ,WAAGJ,IAAH,CAAQqB,WAAR,GAAsB,IAAIA,WAAJ,EAAtB;;AAEA;AACA;AACA;;AAEA;AACA,YAAIC,aAAad,QAAQ,YAAR,CAAjB;AACAJ,WAAGJ,IAAH,CAAQsB,UAAR,GAAqB,IAAIA,UAAJ,EAArB;;AAEA;AACA,YAAIC,YAAYf,QAAQ,WAAR,CAAhB;AACAJ,WAAGJ,IAAH,CAAQuB,SAAR,GAAoB,IAAIA,SAAJ,EAApB;;AAEA;AACA,YAAIC,eAAehB,QAAQ,cAAR,CAAnB;AACAJ,WAAGJ,IAAH,CAAQwB,YAAR,GAAuB,IAAIA,YAAJ,EAAvB;;AAEA;AACA;AACA;;AAEA;AACH;AA1FQ,CAAb;;AA6FAC,OAAOC,OAAP,GAAiB1B,IAAjB;;AAGA","file":"Atom.js","sourceRoot":"../../../../../assets/Script/AtomFrame","sourcesContent":["\nconst Atom = {\n    createAtom(){\n        console.log(\"!---- AtomFrame ----!\" + cc.sys.os)\n        cc.Atom = {};\n\n        // //计时器 timer\n        var timerMgr = require(\"timerMgr\");\n        cc.Atom.timerMgr = new timerMgr();\n\n        // md5 \n        // var md5 = require(\"md5\");\n        // cc.Atom.md5 = new md5();\n\n        //状态机 gamestate\n        var gameState = require(\"gameState\");\n        cc.Atom.gameState = new gameState();\n\n        //游戏配置单例\n        var gameConfMgr = require(\"gameConfMgr\");\n        cc.Atom.gameConfMgr = new gameConfMgr();\n\n        //事件管理器 event\n        var eventMgr = require(\"eventMgr\");\n        cc.Atom.eventMgr = new eventMgr();\n\n        //文本信息数据 msgmgr\n        var msgMgr = require(\"msgMgr\");\n        cc.Atom.msgMgr = new msgMgr();\n\n        //文件管理\n        // var fileMgr = require(\"AtomFrame/fileMgr\");\n        // cc.Atom.fileMgr = new fileMgr();\n        \n        //sprite管理 \n        var spriteMgr = require(\"spriteMgr\");\n        cc.Atom.spriteMgr = new spriteMgr();\n\n        //音频管理 audio\n        var audioMgr = require(\"audioMgr\");\n        cc.Atom.audioMgr = new audioMgr();\n\n        //预设管理器 prefab管理器mgr\n        var prefabMgr = require(\"prefabMgr\");\n        cc.Atom.prefabMgr = new prefabMgr();\n\n        //特效 effect \n        var effectMgr = require(\"effectMgr\");\n        cc.Atom.effectMgr = new effectMgr();\n\n        //动画 ani\n        var animateMgr = require(\"animateMgr\");\n        cc.Atom.animateMgr = new animateMgr();\n\n        //resource 统一管理资源 audioMgr、  prefabMgr 、effectMgr 、animateMgr\n        var resMgr = require(\"resMgr\");\n        cc.Atom.resMgr = new resMgr();\n\n        //UI管理器 uimgr\n        var UIMgr = require(\"UIMgr\");\n        cc.Atom.UIMgr = new UIMgr();\n\n        //公共工具函数 comfun\n        var comFunMgr = require(\"comFunMgr\");\n        cc.Atom.comFunMgr = new comFunMgr();\n\n        //游戏数据 gameData\n        var gameDataMgr = require(\"gameDataMgr\");\n        cc.Atom.gameDataMgr = new gameDataMgr();\n\n        //平台接口管理 platform\n        // var platformMgr = require(\"AtomFrame/platformMgr\");\n        // cc.Atom.platformMgr = new platformMgr();\n\n        //网络管理 net\n        var gameNetMgr = require(\"gameNetMgr\");\n        cc.Atom.gameNetMgr = new gameNetMgr();\n\n        //socekt\n        var socketMgr = require(\"socketMgr\");\n        cc.Atom.socketMgr = new socketMgr();\n\n        //热更新 hotupdate\n        var hotUpdateMgr = require(\"hotUpdateMgr\");\n        cc.Atom.hotUpdateMgr = new hotUpdateMgr();\n\n        //内存探测器\n        // var memory = require(\"AtomFrame/memoryDetector\");\n        // cc.Atom.memory = new memory();\n\n        ///以下补充游戏内容相关的对象///\n    },\n};\n\nmodule.exports = Atom;\n\n\n/**\n    1.计时器 \n    2.游戏配置管理器  --存储一些全局的只读的游戏配置，如玩家初始速度、游戏初始音量等，扩展的配置。\n    3.文本内容管理器  --读取资源中的配置表.通过与配置表键值对调用\n    4.游戏运行数据管理器  --将任意类型的数据以树状结构的形式进行保存，用于管理游戏运行时的各种数据，支持指定存储。\n    5.加解密管理器 --包含MD5 、AES 、BASE64 等常用的加解密处理\n\n    6.事件管理 --游戏逻辑监听、抛出事件的机制\n    7.状态机 -- 提供创建、使用和销毁有限状态机的功能，一些适用于有限状态机机制的游戏逻辑\n    7-1.流程 -- 是贯穿游戏运行时整个生命周期的有限状态机。通过流程，将不同的游戏状态进行解耦将是一个非常好的习惯。对于网络游戏，你可能需要如检查资源流程、更新资源流程、检查服务器列表流程、选择服务器流程、登录服务器流程、创建角色流程等流程\n    \n    8.资源管理 -- 数据表、本地化字典，还是复杂的实体、场景、界面，我们都将使用异步加载\n    9.sprite管理\n    10.音频管理 -- 提供管理声音和声音组的功能，用户可以自定义一个声音的音量，循环播放或者暂停\n    11.预设管理 -- 我们将游戏场景中，动态创建的一切物体定义为实体。此模块提供管理实体和实体组的功能，如显示隐藏实体、挂接实体（如挂接武器、坐骑，或者抓起另一个实体）等。实体使用结束后可以不立刻销毁，从而等待下一次重新使用。\n    12.特效管理\n    13.动画管理\n    14.对象管理 -- 提供对象缓存池的功能，避免频繁地创建和销毁各种游戏对象，提高游戏性能\n    14.UI管理   -- 提供管理界面和界面组的功能，如显示隐藏界面、激活界面、改变界面层级等 （用这个处理屏幕适配）\n    14.场景管理 -- 提供场景管理的功能\n    15.公共工具函数\n    16.网络管理 -- 提供使用短连接的功能，可以用 Get 或者 Post 方法向服务器发送请求并获取响应数据，可指定允许几个 Web 请求器进行同时请求\n    17.socket --提供使用 Socket 长连接的功能，当前我们支持 TCP 协议，同时兼容 IPv4 和 IPv6 两个版本 。可以同时建立多个连接与多个服务器同时进行通信，比如除了连接常规的游戏服务器，还可以连接语音聊天服务器\n    18.热更\n\n    19.titlemap管理\n    20.龙骨管理\n    21.文件管理\n    22.平台管理\n    23.本地化 --提供本地化功能，也就是我们平时所说的多语言 参考ios的本地化\n\n    24.内存管理\n    25.调试器 --在 编辑器中运行或者以 Development 方式发布运行时，将出现调试器窗口，便于查看运行时日志、调试信息等。还可以方便地将自己的功能注册到调试器窗口上并使用 （支持运行系统指令类似饥荒）\n*/\n"]}